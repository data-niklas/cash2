Block = { Statement ~ (Divider ~ NewLines ~ Statement)* }
Divider = _{ "\n" | ";" | EOI }
NewLines = _{ "\n"* }

WrappedBlock = _{ "{" ~ NewLines ~ Block ~ NewLines ~ "}"}
Statement = { WhileLoop | ForLoop | Conditional | WrappedBlock | Assignment | Capture | Expr }
Assignment = { Ident ~ Indexing* ~ Infix? ~ "=" ~ Expr }
ForLoop = { "for" ~ Ident ~ "in" ~ Expr ~ WrappedBlock }
WhileLoop = { "while" ~ Expr ~ WrappedBlock }
Conditional = {If ~ Elif* ~ Else?}
If = _{ "if" ~ Expr ~ WrappedBlock }
Elif = _{ "elif" ~ Expr ~ WrappedBlock }
Else = _{ "else" ~ WrappedBlock }

Expr = { Prefix* ~ Primary ~ Postfix* ~ (Infix ~ Prefix* ~ Primary ~ Postfix*)* }
Primary = { Literal | Paren | Capture }
Pipe = { PipeCall ~ ( "|" ~ PipeCall)* }
PipeCall = { Ident ~ FunctionCall}
Capture = { "$" ~ Pipe }
Literal = { Range | Float | Int | String | Bool | Array | Dict | Function }
Paren = _{ "(" ~ Expr ~ ")" }

Infix = { "+" | "-" | "*" | "/" | "%" | "**" | "!=" | "==" | "<=" | ">=" | "<" | ">" | "&" | "|" | "^" | "in" | "<<" | ">>" }
Prefix = { "+" | "-" | "!" | "await" | "async" }
Postfix = { FunctionCall | Indexing }

FunctionCall = { "(" ~ Arguments? ~ ")"}
Indexing = { ("[" ~ Expr ~ "]") | ("::" ~ Ident) }
Arguments = _{ NewLines ~ Expr ~ ( "," ~ NewLines ~ Expr)* ~ NewLines }

Function = { "(" ~ FunctionParams? ~ ")" ~ "->" ~ WrappedBlock }
FunctionParams = { FunctionParam ~ ("," ~ NewLines ~ FunctionParam)* }
FunctionParam = { Ident ~ OptionalMarker? }
OptionalMarker = _{ "=" ~ (Literal | Ident)}

Dict = { "{" ~ NewLines ~ Pairs?  ~ NewLines ~ "}" }
Pairs = _{ Pair ~ ("," ~ NewLines ~ Pair)* }
Pair = { (Ident | String) ~ ":" ~ Expr }

Array = { "[" ~ Arguments? ~ "]"}
Int = @{ "0x" ~ HexInt | "0b" ~ BinInt | "0o" ~ OctInt  | DecInt }
DecInt = @{ ASCII_DIGIT ~ ( "_"* ~ ASCII_DIGIT)* }
HexInt = @{ ASCII_HEX_DIGIT ~ ( "_"* ~ ASCII_HEX_DIGIT)* }
OctInt = @{ ASCII_OCT_DIGIT ~ ( "_"* ~ ASCII_OCT_DIGIT)* }
BinInt = @{ ASCII_BIN_DIGIT ~ ( "_"* ~ ASCII_BIN_DIGIT)* }
Float = @{ DecInt? ~ (("." ~ DecInt ~ "_"* ~ ( "e" ~ DecInt)?) | "e" ~ DecInt) }
Bool = @{ "false" | "true" }
Ident = @{ "$"? ~ ASCII_ALPHA ~ ( ASCII_ALPHANUMERIC | "_")* }
Range = @{ (Int | Ident) ~ ".." ~ (Int | Ident) }


String = ${ ("\"" ~ DoubleQuoteContent ~ "\"") | ("'" ~ SingleQuoteContent ~ "'")}
DoubleQuoteContent = _{ Home? ~ ( Interpolation | Escape | DoubleQuoteText)* }
SingleQuoteContent = _{ (Escape | SingleQuoteText)* }
Interpolation = { "${" ~ Expr ~ "}"}
Home = @{ "~" }
Escape = { "\\" ~ (("x" ~ ASCII_HEX_DIGIT{1,4}) | ANY) }
DoubleQuoteText = { (!("\"" | Interpolation | Escape) ~ ANY)+ }
SingleQuoteText = {  (!("\'" | Escape) ~ ANY)+}

LineComment = @{ "#" ~ (!"\n" ~ ANY)* }
WHITESPACE = _{ " " | "\t" }
COMMENT = _{ ("/*" ~ (!"*/" ~ ANY)* ~ "*/") | LineComment }